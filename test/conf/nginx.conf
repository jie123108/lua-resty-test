#user  nobody;
worker_processes  1;

error_log  logs/resty-test-error.log  info;
pid        logs/resty-test-nginx.pid;


events {
    worker_connections  1024;
}


http {
    # include       /usr/local/ngx_openresty/nginx/conf/mime.types;
    #default_type  application/octet-stream;

    log_format  main  '$remote_addr|$remote_user|$time_local|$request|'
                      '$status|$body_bytes_sent|$http_referer|'
                      '$http_user_agent|$http_x_forwarded_for|$http_x_real_ip|';
        
    
    access_log  logs/resty-test-access.log  main;
    lua_code_cache  on;
    sendfile        on;

    client_body_buffer_size 16m;
    client_max_body_size 16m;
    client_body_timeout 3m;
    lua_socket_buffer_size 256k;
    lua_check_client_abort off;
    
    tcp_nodelay on;
    keepalive_timeout  65;

    init_worker_by_lua '
        cjson = require("cjson")
        -- 临时存储注册用户信息，登录信息等。(只有在worker_processes配置为1时，才能保证运行正常)
        cache = {}
    ';

    server {
        listen 100;
        server_name test.com;
        location = /account/sms/send { 
            # request body: {tel: "电话号码"}
            content_by_lua '
                ngx.req.read_body()
                local body = ngx.req.get_body_data() 
                local jso = cjson.decode(body)
                -- TODO: 发送短信
                local code = "1984"
                cache["cd:" .. tostring(code)] = jso.tel
                -- 返回Code，用于单元测试。
                local t = {ok=true, data={code=code}}
                ngx.say(cjson.encode(t));
            ';  
        }

        location = /account/reg {
            # request body: {code: "验证吗", tel: "电话号码"，username: "用户名"}
            content_by_lua '
                -- 注册帐号
                ngx.req.read_body()
                local body = ngx.req.get_body_data() 
                local jso = cjson.decode(body)
                local key = "cd:" .. tostring(jso.code)
                local tel = cache[key]
                if tel == nil or tel ~= jso.tel then 
                    ngx.say(cjson.encode({ok=false, reason="ERR_CODE_INVALID"}))
                    ngx.exit(0)
                end
                local user_id=100
                local token="Tk-for-Login"
                local key = "tk:" .. token
                cache[key] = cjson.encode({user_id=user_id, username=jso.username})
                ngx.say(cjson.encode({ok=true, data={token=token, user_id=user_id}}))                
            ';  
        }   
        location = /account/user_info/get {
            # token需要通过请求头(X-Token)传递。
            content_by_lua '
                local headers = ngx.req.get_headers()
                local token = headers["X-Token"]
                if token == nil or cache["tk:" .. token] == nil then 
                    ngx.status = 401
                    ngx.say(cjson.encode({ok=false, reason="ERR_TOKEN_INVALID"}))
                    ngx.exit(0)
                end
                local key = "tk:" .. token
                local user_info = cjson.decode(cache[key])

                ngx.say(cjson.encode({ok=true, data=user_info}))
            ';  
        }   
    } 
}
